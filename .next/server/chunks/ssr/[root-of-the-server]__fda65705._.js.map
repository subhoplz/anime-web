{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/notification.ts"],"sourcesContent":["'use server';\n\nimport webpush from 'web-push';\n\n// VAPID keys should be generated only once and stored securely\nconst vapidKeys = {\n  publicKey: process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || '',\n  privateKey: process.env.VAPID_PRIVATE_KEY || '',\n};\n\nconsole.log('[Server] Using VAPID Public Key:', vapidKeys.publicKey ? 'Loaded from ENV' : 'MISSING/Temporary');\nconsole.log('[Server] Using VAPID Private Key:', vapidKeys.privateKey ? 'Loaded from ENV' : 'MISSING/Temporary');\n\nif (!vapidKeys.publicKey || !vapidKeys.privateKey) {\n  console.warn('[Server] VAPID keys are missing. Generating temporary keys. Please configure environment variables.');\n  const generatedKeys = webpush.generateVAPIDKeys();\n  vapidKeys.publicKey = generatedKeys.publicKey;\n  vapidKeys.privateKey = generatedKeys.privateKey;\n}\n\ntry {\n  webpush.setVapidDetails(\n    'mailto:test@example.com', // Replace with your email\n    vapidKeys.publicKey,\n    vapidKeys.privateKey\n  );\n  console.log('[Server] web-push VAPID details set successfully.');\n} catch (error) {\n  console.error('[Server] Failed to set VAPID details:', error);\n}\n\nexport async function subscribeUser(subscription: PushSubscription) {\n  console.log('[Server] subscribeUser called with subscription:', subscription);\n  try {\n    // TODO: Store the subscription securely.  If storing fails, this should return an error.\n    // For now, we'll simulate a potential error.\n    const simulateStorageError = false; // Change this to true to simulate an error\n    if (simulateStorageError) {\n      throw new Error('Failed to store subscription.');\n    }\n    return { success: true };\n  } catch (error: any) {\n    console.error('[Server] Error storing subscription:', error);\n    return { success: false, error: error.message || 'Failed to subscribe user' };\n  }\n}\n\nexport async function sendNotification(subscription: any, payload: string) {\n  console.log('[Server] sendNotification called.');\n  console.log('[Server] Attempting to send notification to endpoint:', subscription.endpoint);\n  console.log('[Server] Payload:', payload);\n  try {\n    await webpush.sendNotification(subscription, payload);\n    console.log('[Server] webpush.sendNotification succeeded.');\n    return { success: true };\n  } catch (error: any) {\n    console.error('[Server] webpush.sendNotification failed:', error);\n    // Handle specific errors\n    if (error.statusCode) {\n       console.error(`[Server] Status Code: ${error.statusCode}`);\n       console.error(`[Server] Body: ${error.body}`);\n       console.error(`[Server] Headers: ${JSON.stringify(error.headers)}`);\n    }\n    if (error.statusCode === 410 || error.statusCode === 404) {\n      console.log('[Server] Subscription has expired or is no longer valid.');\n      // TODO: Remove the invalid subscription from your database\n    }\n    return { success: false, error: error.message || 'Unknown server error' };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAEA;;;;;AAEA,+DAA+D;AAC/D,MAAM,YAAY;IAChB,WAAW,+HAA4C;IACvD,YAAY,QAAQ,GAAG,CAAC,iBAAiB,IAAI;AAC/C;AAEA,QAAQ,GAAG,CAAC,oCAAoC,UAAU,SAAS,GAAG,oBAAoB;AAC1F,QAAQ,GAAG,CAAC,qCAAqC,UAAU,UAAU,GAAG,oBAAoB;AAE5F,IAAI,CAAC,UAAU,SAAS,IAAI,CAAC,UAAU,UAAU,EAAE;IACjD,QAAQ,IAAI,CAAC;IACb,MAAM,gBAAgB,2IAAA,CAAA,UAAO,CAAC,iBAAiB;IAC/C,UAAU,SAAS,GAAG,cAAc,SAAS;IAC7C,UAAU,UAAU,GAAG,cAAc,UAAU;AACjD;AAEA,IAAI;IACF,2IAAA,CAAA,UAAO,CAAC,eAAe,CACrB,2BACA,UAAU,SAAS,EACnB,UAAU,UAAU;IAEtB,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,yCAAyC;AACzD;AAEO,eAAe,cAAc,YAA8B;IAChE,QAAQ,GAAG,CAAC,oDAAoD;IAChE,IAAI;QACF,yFAAyF;QACzF,6CAA6C;QAC7C,MAAM,uBAAuB,OAAO,2CAA2C;QAC/E,uCAA0B;;QAE1B;QACA,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO,IAAI;QAA2B;IAC9E;AACF;AAEO,eAAe,iBAAiB,YAAiB,EAAE,OAAe;IACvE,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,yDAAyD,aAAa,QAAQ;IAC1F,QAAQ,GAAG,CAAC,qBAAqB;IACjC,IAAI;QACF,MAAM,2IAAA,CAAA,UAAO,CAAC,gBAAgB,CAAC,cAAc;QAC7C,QAAQ,GAAG,CAAC;QACZ,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,6CAA6C;QAC3D,yBAAyB;QACzB,IAAI,MAAM,UAAU,EAAE;YACnB,QAAQ,KAAK,CAAC,CAAC,sBAAsB,EAAE,MAAM,UAAU,EAAE;YACzD,QAAQ,KAAK,CAAC,CAAC,eAAe,EAAE,MAAM,IAAI,EAAE;YAC5C,QAAQ,KAAK,CAAC,CAAC,kBAAkB,EAAE,KAAK,SAAS,CAAC,MAAM,OAAO,GAAG;QACrE;QACA,IAAI,MAAM,UAAU,KAAK,OAAO,MAAM,UAAU,KAAK,KAAK;YACxD,QAAQ,GAAG,CAAC;QACZ,2DAA2D;QAC7D;QACA,OAAO;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO,IAAI;QAAuB;IAC1E;AACF;;;IAtCsB;IAgBA;;AAhBA,+OAAA;AAgBA,+OAAA","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport { sendNotification } from '../services/notification'; // Adjust import path if needed\n\nexport async function sendNotificationAction(message: string) {\n  console.log('[Action] sendNotificationAction called with message:', message);\n  \n  // --- IMPORTANT --- \n  // You MUST replace this with actual logic to retrieve \n  // the user's push subscription from your database or storage.\n  // This placeholder will NOT work in a real application.\n  const subscription: PushSubscription | null = null; // Replace with actual retrieval logic\n\n  if (!subscription) {\n    console.error('[Action] No subscription found. Cannot send notification.');\n    // Optionally, inform the user they need to subscribe first.\n    return { success: false, error: 'Subscription not found.' };\n  }\n\n  console.log('[Action] Retrieved subscription:', subscription);\n\n  try {\n    const result = await sendNotification(subscription, message);\n    console.log('[Action] sendNotification result:', result);\n    return result;\n  } catch (error: any) {\n    console.error('[Action] Error calling sendNotification:', error);\n    return { success: false, error: error.message || 'Failed to send notification' };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA,gOAA6D,+BAA+B;;;;;AAErF,eAAe,uBAAuB,OAAe;IAC1D,QAAQ,GAAG,CAAC,wDAAwD;IAEpE,qBAAqB;IACrB,uDAAuD;IACvD,8DAA8D;IAC9D,wDAAwD;IACxD,MAAM,eAAwC,MAAM,sCAAsC;IAE1F,wCAAmB;QACjB,QAAQ,KAAK,CAAC;QACd,4DAA4D;QAC5D,OAAO;YAAE,SAAS;YAAO,OAAO;QAA0B;IAC5D;;AAYF;;;IAzBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {sendNotificationAction as '4042b32b31ecf391dc1b7006524a70c14b8e1007f3'} from 'ACTIONS_MODULE0'\nexport {subscribeUser as '405f1ff10683e7eb3f764c1420b7bfdbbaee8b5c9a'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}